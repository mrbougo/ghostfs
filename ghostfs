#!/usr/bin/perl
# This program is free software. It comes without any warranty, to
# the extent permitted by applicable law. You can redistribute it
# and/or modify it under the terms of the Do What The Fuck You Want
# To Public License, Version 2, as published by Sam Hocevar. See
# http://sam.zoy.org/wtfpl/COPYING for more details.

use strict;
use warnings;

use Fcntl ':mode';
use Fuse;
use Pod::Usage;

use POSIX qw(EINVAL ENOENT);

my $tree;

my %types_stoi = (
	'f' => S_IFREG,
	'd' => S_IFDIR,
	'l' => S_IFLNK,
);

#prepare tree structure from find-file
#(see SNAP on perlmonks)
sub prepare_tree {
	my ($f) = @_;

	my %tree;
	my @s; #stack, associates full directory paths with their parent node
	my $tree = my $node = {};
	while($_ = next_record($f)) {
		my %entry;
		my $path;

		($path, @entry{qw(usergroup atime mtime ctime size type linktarget perm)}) = 
			m/^(.*?)         \000  #path
			   (\d+:\d+)     \000  #uid:gid
			   (\d+\.\d+)    \000  #atime
			   (\d+\.\d+)    \000  #mtime
			   (\d+\.\d+)    \000  #ctime
			   (\d+)         \000  #size
			   ([dlfbcps])   \000  #type
			   (.*?)         \000  #link target
			   (0[0-7]{3,4}) \000$ #permissions
			/sx or die "Bad record: $_\n";

		if ($entry{type} !~ /[dlf]/) {
			warn "type of $path not supported: $entry{type}\n";
			next;
		}

		delete $entry{linktarget} if $entry{linktarget} eq '';

		my ($parent,$name) = $path =~ m|(?:(.*)/)?(.*)|;
		$entry{name} = $name;

		$node = (pop @s)->[1] while @s and $parent ne $s[-1][0];
		$node->{children}{$name} = my $child = \%entry;

		next unless $entry{type} eq 'd';

		push @s, [ $path, $node ];

		$node = $child;
	}

	$tree = (values $tree->{children})[0];
	return $tree;
}

#get next record. Format: nine fields separated by eight nulls,
# followed by one null and a newline
sub next_record {
	my ($f) = @_;

	local $/ = "\000";

	return undef if eof($f);

	my $out = '';
	for (1 .. 9) {
		die "unexpected eof in list file\n" if eof($f);
		$out = $out . readline($f);
	}

	#last newline:
	read $f, $_, 1 or die "syntax error in list file\n";

	return $out;
}


sub getfile {
	my @path = split '/', shift;
	shift @path; # $_[0] starts with /

	my $node = $tree;
	foreach (@path) {
		$node = $node->{children}{$_} or return undef;
	}
	return $node;
}

sub getattr {
	my $file = getfile(shift) or return -ENOENT();

	my $dev = 0;
	my $ino = 1;
	my $mode = $types_stoi{$file->{type}} | oct $file->{perm};
	my $nlink = 1;
	my ($uid,$gid) = split ':', $file->{usergroup};
	my $rdev = 0;
	my $size = $file->{size};
	my $atime = int $file->{atime};
	my $mtime = int $file->{mtime};
	my $ctime = int $file->{ctime};
	my $blksize = 512;
	my $blocks = 1;

	return ($dev, $ino, $mode, $nlink, $uid, $gid, $rdev, $size, $atime, $mtime,
	        $ctime, $blksize, $blocks);
}

sub readlink {
	my $file = getfile(shift) or return -ENOENT();

	return -EINVAL() if $file->{type} ne 'l';
	return $file->{linktarget};
}

sub getdir {
	my $file = getfile(shift) or return -ENOENT();

	return -EINVAL() if $file->{type} ne 'd';
	return ('.', '..', keys %{$file->{children}}, 0);
}

pod2usage({ -message => 'Wrong argument count', -exitval => 2 }) if @ARGV != 2;

my ($mountpoint, $listfname) = @ARGV;

die "Directory not found: $mountpoint\n" unless -d $mountpoint;

my $f;
if ($listfname eq '-') {
	$f = \*STDIN;
} else {
	die "File not found: $listfname\n" unless -f $listfname;
	open($f, "<", $listfname) or die "Could not open $listfname: $!\n";
}

$tree = prepare_tree($f);

close $f if $f ne \*STDIN;

Fuse::main(
	mountpoint => $mountpoint,
	getattr => \&getattr,
	readlink => \&readlink,
	getdir => \&getdir,
);

__END__

=head1 NAME

ghostfs - A fuse driver for a ghost filesystem

=head1 SYNOPSIS

B<ghostfs> I<mountpoint> I<listfile>

=head1 DESCRIPTION

B<ghostfs> is a fuse driver that fakes the presence of files, directories and links with (mostly) right stat information. It reports the right size, mode, uid, gid and access/modification/change times.

If I<listfile> is -, the list is read from standard input.

Use B<ghostfs-list> to generate the file list.

=head1 CAVEATS

There is no subsecond precision for access, modification and change times, due to a limitation in the Perl B<Fuse> module. Block files, FIFOs, sockets and other special files are not supported. Inodes and hardlink counts are ignored.

=head1 SEE ALSO

B<ghostfs-list>
